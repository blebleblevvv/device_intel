			Signed Kernel Modules
--------------------------------------------------------------------------------

This document gives a simple introduction of this feature in kernel and some
notes which help to reduce the impact among developers once it is enabled in
Android-IA tree.

1. Introduction

Essentially, this feature is a use case of digital signature.

A module's binary is the payload (message) to be signed with a private key held
by the publisher. A "signed" kernel module is actually the payload appended with
its signature and necessary data structures for the verification. Modules get
signed at "module install" stage in kbuild. The public key in the certificate
which is in the same key pair of the private key, is embedded in kernel's image.

All of the above happens when kernel is built. At run time, kernel will use the
embedded public key to verify a module binary (*.ko). If the module's hash value
cannot pass the verification against its signature, kernel refuses to load it.
There is another config switch to direct kernel if it should let unsigned
modules pass the verification.

2. Throw-away keys VS static keys

The existing implementation in kernel is using throw-away keys. The key pair is
automatically generated by kernel build system. If you delete it, a new but
different key pair will be generated and used in the next kernel build.

We have changed throw-away keys to the static key schema in Android-IA tree.
Please refer to the README at:

device/intel/support/testkeys/kernel

for the reasons and cautions. The static key pair and config file will be copied
to kernel output directory before kernel build starts. This will mute kernel's
generation of throw-away keys.

These static keys are generated with fake identity and only for test purposes.

You can replace these prebuilt keys with yours via the new three variables in
Android build system:

    $(TARGET_MODULE_PRIVATE_KEY)
    $(TARGET_MODULE_CERTIFICATE)
    $(TARGET_MODULE_GENKEY)

Take device/intel/common/BoardConfig.mk as an example.

3. How to enable it

Run "make menuconfig" (Please refer to other sources for how to do it with your
own defconfig files. It is not in the scope of this doc)

Enable these options:

Enable loadable module support
       Module signature verification
              Require modules to be validly signed
              Which hash algorithm should modules be signed with?
                    Sign modules with SHA-1
                    Sign modules with SHA-224
                    ...

The Kconfig switches behind the scene are:

CONFIG_MODULE_SIG
CONFIG_MODULE_SIG_FORCE
CONFIG_MODULE_SIG_SHA512

The last one depends on which hash algorithm you chose.

At the time this document is being written, this feature has been enabled by
default in Android-IA kernel configuration among all build variants. Loading
unsigned kernel modules will not be allowed, as an enforcement of system
security (CONFIG_MODULE_SIG_FORCE=y).

4. Notes to developers

4.1 Using throw-away keys (existing kernel implementation)

() The signing happens at build time with auto generated key pairs, so you
should not need to do anything special in your daily development as long as
you are happy with these throw-away keys.

() The auto-gen keys are in the kernel output directory. However signed modules
are packed in system image. If you remove key pairs (e.g. clean up an existing
build by “make clobber” or delete “out” directory to do a clean build), you must
flash both of kernel and system images to get module loaded successfully with
the new build.

() When make your change in driver code or add a new module in the kernel build,
just build kernel and modules as before. You should not need to do anything
special as long as the key pair is unchanged in the kernel output directory.
Trying to load any unsigned modules or modules not signed with the current
certificate from any 3rd party will fail. You have to build them from the source
with the same keys.

() Please adjust system time and date in BIOS correctly (synced with your build
system). The current system time should NOT be earlier than the time of the
build. Otherwise kernel will refuse to load the modules because the certificate
has not been valid yet.

4.2 Use your own keys:

The current kernel generates keys with this command. You can use it to create
your own keys:

	openssl req -new -nodes -utf8 SHA_HASH -days 36500 -batch \
		-x509 -config x509.genkey \
		-outform DER -out signing_key.x509 \
		-keyout signing_key.priv

SHA_HASH could be:
sha1
sha224
sha256
sha384
sha512

You must use the same option as what's enabled in kernel configuration.

x506.genkey is a file created by kernel/kernel/Makefile, please check it to see
its content, or you can just create your own x509.genkey based on one created by
kernel at build time.

Set these variables in your *.mk file with paths of new keys and config file:
    $(TARGET_MODULE_PRIVATE_KEY) - path of your private key
    $(TARGET_MODULE_CERTIFICATE) - path of your certificate
    $(TARGET_MODULE_GENKEY)      - path of your config file

(Again, take device/intel/common/BoardConfig.mk as an example.)

Do the build.

Jianxun Zhang <jianxun.zhang@linux.intel.com>
